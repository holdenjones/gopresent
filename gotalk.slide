Go for the Web
Using Go to make web sites and services.

Holden Jones
CS1762 Web Technology Presentation

* What is Go?

Go is a programming language made at Google.

.image images/gopher.png

- Creation started in 2007.
- First version released in 2009.
- The most recent version, 1.6, was released this February. 
- Its mascot is a Gopher.
- It's completely open-source.

* Go's Creators

.html html/gocreators.html

- Robert Griesemer (V8)
- Rob Pike (UTF-8)
- Ken Thompson (B, UTF-8, Unix)

* Go as a language

A direct response to the problems of modern programming languages.

Designed to be

- Scalable
- Concurrent
- Simple

Features

- Static typing
- Object-oriented (In its own way)
- Handles memory
- Built-in garbage collection
- Compiled (using Go since v1.5!), not interpreted

* Who is using Go?

.html html/usinggo.html

* A Few Basics of Go

* Datatypes

Primitives

  myNumber int (float, complex, sized variants, etc)
  myString string
  myBoolean , myOtherBoolean , myFinalBoolean bool
  ...
  
Arrays, Slices, and Maps

  myArray [10]int
  mySlice []int
  myMap map[string]int
  
Assignment
 
  var myInteger int = 4
  newInteger := 4
  
Pointers

  var myIntPointer *int
  
* Functions

Basic function

  func myFunction( x , y int ) int {
    ...
    return thing
  }
  returned := myFunction(1,2)

  
Multiple return types
 
  func sumAndAverage( x , y , z int) (sum , avg int) {
    ...
    return sum , avg
  }
  mySum , myAverage := safelySum(1,2,3)
  
Variadic functions

  func SumLotsOfNumbers( nums int... ) int {
    ...
    return thing
  }
  
* Custom Types and Structs

Custom type definitions

  type myType int

Structs
  
  type Position struct {
    x , y , z int
  }
  
  var myHomeLocation Position = new(Position)
  myHomeLocation.x = 4
  
Struct methods

  func (p Position) distanceFrom(o Position) int {
  }
  
* Interfaces

Interfaces

  type Summable interface {
    sum() int
  }

As variables
  
  type SliceOfSummables struct {
    sumlist []Summable
  }
  
Nested interfaces (Implicit)

  type SumAndAverage interface {
    sum() int
    avg() int
  }

* Hello World

.code code/hello_world.go

.play code/hello_world.go /func main()/,

* What are Go-routines?

.play code/goroutine_1.go

* Using a Go-routines

.play code/goroutine_2.go

* Let's simulate a Web Service



* Stuff